{"version":3,"sources":["components/weatherCards.js","components/searchBar.js","App.js","reportWebVitals.js","scss/NHaasGroteskDSPro.ttf","index.js"],"names":["WeatherCards","weatherData","zipCode","console","log","city_name","tz","zipcode_to_timezone","lookup","dailyData","last_day","x","inc","local_datetime","moment","day","format","day_string","time","inc_temp_min","Math","round","inc_temp_max","push","className","Object","keys","map","key","times","obj","index","src","SearchBar","useState","zip","setZip","units","setUnits","fetchData","fetch","then","response","ok","json","Promise","reject","data","ReactDOM","render","document","getElementById","catch","error","style","onSubmit","e","preventDefault","placeholder","type","onChange","target","value","maxLength","ToggleButtonGroup","exclusive","newUnits","aria-label","ToggleButton","App","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.e71a1a23.chunk.js","sourcesContent":["import zipcode_to_timezone from 'zipcode-to-timezone';\nimport moment from 'moment-timezone';\n\nexport default function WeatherCards ({weatherData, zipCode}) {\n\n  var image_url = 'https://openweathermap.org/img/wn/'\n  console.log(weatherData['list']);\n  var city_name = weatherData['city']['name'];\n\n  var tz = zipcode_to_timezone.lookup(zipCode);\n  console.log(tz, zipCode);\n  let dailyData = {};\n  let last_day = '';\n\n  for (const x in weatherData['list']) {\n    var inc = weatherData['list'][x];\n\n    var local_datetime = moment.tz(inc['dt_txt'] + '+0000', tz);\n    var day = local_datetime.format('YYYY-MM-DD');\n    var day_string = local_datetime.format('ddd, MMM Do');\n    var time = local_datetime.format('h:mm A');\n\n    console.log(day, time,day_string);\n\n\n    var inc_temp_min = Math.round(inc['main']['temp_min']);\n    var inc_temp_max = Math.round(inc['main']['temp_max']);\n    console.log(day, inc_temp_min, inc_temp_max);\n    console.log(inc['weather'][0]);\n\n    if (day !== last_day) {\n      dailyData[day] = {}\n      dailyData[day]['times'] = []\n      dailyData[day]['string'] = day_string;\n      dailyData[day]['min'] = 10000000;\n      dailyData[day]['max'] = 0;\n      dailyData[day]['total_inc'] = 0\n    }\n    if (inc_temp_min < dailyData[day]['min']) {\n      dailyData[day]['min'] = inc_temp_min;\n    }\n    if (inc_temp_max > dailyData[day]['max']) {\n      dailyData[day]['max'] = inc_temp_max;\n    }\n\n    dailyData[day]['times'].push({\n      \"time\": time,\n      \"weather\": inc['weather'][0],\n      \"temp\": Math.round(inc['main']['temp'])\n    })\n\n    console.log(dailyData[day]);\n    last_day = day;\n    dailyData[day]['total_inc'] += 1\n  }\n  console.log(dailyData);\n\n  return (\n    <>\n      <div className=\"weather-header-wrapper\">\n        <h2 className=\"weather-header\">{city_name} Weather</h2>\n      </div>\n      <div className=\"day-container\">\n      {\n        Object.keys(dailyData).map((key) => {\n          return (dailyData[key]['total_inc'] === 8) ?\n            <div key={key} className=\"day-wrapper\">\n              <div className=\"date-wrapper\">\n                <span className=\"day-title\">{dailyData[key]['string']}</span>\n                <span className=\"max-temp\">{dailyData[key]['max']}&#730;</span>\n                <span className=\"min-temp\">{dailyData[key]['min']}&#730;</span>\n              </div>\n              {dailyData[key].times.map((obj, index) => {\n                return (\n                  <div key={key + '-' + index} className=\"time-wrapper\">\n                    <span className=\"hour-time\">{obj['time']}</span>\n                    <span className=\"hour-temp\">{obj['temp']}&#730;</span>\n                    <img src={image_url + obj['weather']['icon'] + '@2x.png'} />\n                  </div>\n                )\n              })}\n            </div>\n          :\n            ''\n        })\n      }\n      </div>\n    </>\n  )\n}\n","import React, { useState } from 'react';\nimport WeatherCards from './weatherCards.js'\nimport ReactDOM from 'react-dom';\n\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\n// import $ from 'jquery';\n\nexport default function SearchBar () {\n  const [zip, setZip] = useState('');\n  const [units, setUnits] = useState('imperial');\n  const api_key = 'b8c57c1c1fe78770517a0b492af57a54';\n  const api_url = 'https://api.openweathermap.org/data/2.5/forecast';\n\n  const changeZip = e => {\n    setZip(e.target.value);\n  }\n\n  function fetchData(units) {\n    fetch(`${api_url}?zip=${zip},us&temp_min&units=${units}&APPID=${api_key}`)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          if (zip === '') {\n            return Promise.reject('Please enter a zip code');\n          } else {\n            return Promise.reject('Unrecognized zip code');\n          }\n        }\n      })\n      .then(data => {\n        return ReactDOM.render(<WeatherCards weatherData={data} zipCode={zip} />, document.getElementById('weather-day-container'));\n      })\n      .catch(error => {\n        return ReactDOM.render(\n          <div className=\"weather-header-wrapper\">\n            <h2 className=\"weather-header\" style={{\"font-weight\": \"200\"}}>{error}</h2>\n          </div>,\n          document.getElementById('weather-day-container')\n        )\n      });\n  }\n\n\n\n  const changeUnits = (e, newUnits) => {\n    if (newUnits !== null) {\n      setUnits(newUnits, fetchData(newUnits));\n    }\n  }\n\n  const submitZip = e => {\n    e.preventDefault();\n    fetchData(units);\n  }\n\n  return (\n    <>\n    <form className=\"zip-form\" onSubmit={submitZip}>\n      <label>\n        <input className=\"zip-input\" placeholder=\"Zip Code\" type=\"text\" onChange={changeZip} value={zip} maxLength=\"5\" />\n      </label>\n      <input className=\"zip-submit\" type=\"submit\" value=\"Check Weather\" />\n    </form>\n    <ToggleButtonGroup className=\"unit-buttons\" value={units} exclusive onChange={changeUnits} aria-label=\"temperature units\">\n      <ToggleButton value=\"imperial\">F&#730;</ToggleButton>\n      <ToggleButton value=\"metric\">C&#730;</ToggleButton>\n    </ToggleButtonGroup>\n    </>\n  )\n}\n","\nimport './scss/Fonts.scss';\nimport './scss/App.scss';\n\nimport SearchBar from './components/searchBar.js'\n\nfunction App() {\n\n  return (\n    <div className=\"outer-wrapper\">\n      <div className=\"nav-wrapper\">\n        <h1>WEATHER.BULLETIN</h1>\n        <SearchBar />\n      </div>\n\n      <div id=\"weather-day-container\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/NHaasGroteskDSPro.1d3f2342.ttf\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './scss/NHaasGroteskDSPro.ttf';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}